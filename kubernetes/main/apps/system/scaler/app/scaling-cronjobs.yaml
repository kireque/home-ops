apiVersion: v1
kind: ServiceAccount
metadata:
  name: scale-job-account
  namespace: downloads

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployment-scaler-role
rules:
  - apiGroups: ["apps"]
    resources: ["deployments", "deployments/scale"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deployment-scaler-rolebinding
subjects:
  - kind: ServiceAccount
    name: scale-job-account
    namespace: downloads
roleRef:
  kind: ClusterRole
  name: deployment-scaler-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scale-down
  namespace: downloads
spec:
  timeZone: "Europe/Amsterdam"
  schedule: "55 23 * * *" # At 23:55 every day
  successfulJobsHistoryLimit: 1 # Automatically delete completed jobs
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: downloads-scaler
            action: scale-down
        spec:
          serviceAccountName: scale-job-account
          restartPolicy: Never
          containers:
            - name: kubectl-container
              image: bitnami/kubectl
              command:
                - "/bin/bash"
                - "-c"
                - |
                  for ns in $(kubectl get ns --no-headers | cut -d " " -f1); do
                      # Check if there are deployments to scale
                      if kubectl get deployments -n $ns -l automaticSchedular=true --no-headers | grep -q '.'; then
                          echo "Scaling deployments in namespace '$ns'..."
                          kubectl scale deployments --namespace=$ns -l automaticSchedular=true --replicas=0
                          echo "Deployments scaled in namespace '$ns'."
                      fi
                  done

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scale-up
  namespace: downloads
spec:
  timeZone: "Europe/Amsterdam"
  schedule: "5 19 * * *" # At 19:05 every day
  successfulJobsHistoryLimit: 1 # Automatically delete completed jobs
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: downloads-scaler
            action: scale-up
        spec:
          serviceAccountName: scale-job-account
          restartPolicy: Never
          containers:
            - name: kubectl-container
              image: bitnami/kubectl
              command:
                - "/bin/bash"
                - "-c"
                - |
                  for ns in $(kubectl get ns --no-headers | cut -d " " -f1); do
                      # Check if there are deployments to scale
                      if kubectl get deployments -n $ns -l automaticSchedular=true --no-headers | grep -q '.'; then
                          echo "Scaling deployments in namespace '$ns'..."
                          kubectl scale deployments --namespace=$ns -l automaticSchedular=true --replicas=1
                          echo "Deployments scaled in namespace '$ns'."
                      fi
                  done
